{"version":3,"sources":["enums.ts","api.ts","redux/todos.ts","redux/user.ts","redux/index.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","baseUrl","RANDOMIZE","SET_TODOS","SET_TITLE","selectors","state","todos","actions","type","initialState","selectedOption","all","searchTitle","todosReducer","action","randomizedArr","sort","Math","random","SET_USER","user","currentUserData","userReducer","loadTodos","dispatch","fetch","then","response","json","todosActions","loadUser","userId","getUsers","userActions","deleteTodo","todoId","method","deleteTodoAPI","todosSelectors","userSelectors","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","useDispatch","useState","setSearchTitle","selectOption","setSelectOption","filtredTodos","filter","todo","title","toLowerCase","includes","completed","className","value","onChange","event","target","htmlFor","disabled","selected","active","onClick","length","map","e","preventDefault","checked","readOnly","id","CurrentUser","clearUser","name","email","phone","App","useSelector","useEffect","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a03cc7b7.chunk.js","sourcesContent":["export enum Options {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","const baseUrl = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${baseUrl}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`${baseUrl}/users/${userId}`)\n    .then(response => {\n      return response.json();\n    });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return fetch(`${baseUrl}/todos/${todoId}`, { method: 'DELETE' });\n};\n","import { AnyAction } from 'redux';\nimport { Options } from '../enums';\n\nconst RANDOMIZE = 'RANDOMIZE';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_TITLE = 'SET_TITLE';\n\nexport type TodosState = {\n  todos: Todo[];\n  selectedOption: Options;\n  searchTitle: string;\n};\n\nexport const selectors = {\n  getTodos: (state: TodosState) => state.todos,\n};\n\nexport const actions = {\n  setTodos: (todos: Todo[]) => ({ type: SET_TODOS, todos }),\n  setTitle: (searchTitle: string) => ({ type: SET_TITLE, searchTitle }),\n  randomize: () => ({ type: RANDOMIZE }),\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  selectedOption: Options.all,\n  searchTitle: '',\n};\n\nconst todosReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case RANDOMIZE:\n    {\n      const randomizedArr = state.todos.sort(\n        () => {\n          if (Math.random() > 0.5) {\n            return 1;\n          }\n\n          return -1;\n        },\n      );\n\n      return { ...state, todos: [...randomizedArr] };\n    }\n\n    case SET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case SET_TITLE:\n      return { ...state, searchTitle: action.searchTitle };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_USER = 'SET_USER';\n\nexport type UserState = {\n  currentUserData: User | null,\n};\n\nexport const actions = {\n  setUser: (user: User | null) => ({ type: SET_USER, user }),\n};\n\nexport const selectors = {\n  getUser: (state: UserState) => state.currentUserData,\n};\n\nconst initialState: UserState = {\n  currentUserData: null,\n};\n\nconst userReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER:\n      return { ...state, currentUserData: action.user };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import {\n  applyMiddleware, combineReducers, createStore, Dispatch,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { getTodos, getUsers, deleteTodo as deleteTodoAPI } from '../api';\nimport todosReducer, {\n  selectors as todosSelectors, actions as todosActions, TodosState,\n} from './todos';\nimport userReducer, {\n  selectors as userSelectors, actions as userActions, UserState,\n} from './user';\n\nexport const loadTodos = () => (dispatch: Dispatch) => {\n  getTodos().then((todos: Todo[]) => {\n    dispatch(todosActions.setTodos(todos));\n  });\n};\n\nexport const loadUser = (userId: number) => (dispatch: Dispatch) => {\n  getUsers(userId).then(\n    (user: User) => {\n      dispatch(userActions.setUser(user));\n    },\n    () => {\n      dispatch(userActions.setUser(null));\n    },\n  );\n};\n\nexport const deleteTodo = (todoId: number) => (dispatch: Dispatch) => {\n  deleteTodoAPI(todoId).then(\n    () => {\n      loadTodos()(dispatch);\n    },\n  );\n};\n\nexport const selectors = {\n  getTodos: (state: CombinedState) => todosSelectors.getTodos(state.todos),\n  getUser: (state: CombinedState) => userSelectors.getUser(state.user),\n};\n\ntype CombinedState = {\n  todos: TodosState,\n  user: UserState,\n};\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n  user: userReducer,\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './TodoList.scss';\nimport '../../api';\nimport { Options } from '../../enums';\nimport { deleteTodo, loadUser } from '../../redux';\nimport { actions as todosActions } from '../../redux/todos';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n\n  const { todos } = props;\n  const [searchTitle, setSearchTitle] = useState('');\n  const [selectOption, setSelectOption] = useState<Options>(Options.all);\n\n  const searchHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTitle(event.target.value);\n  };\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectOption(event.target.value as Options);\n  };\n\n  const filtredTodos = todos.filter(\n    todo => todo.title.toLowerCase().includes(searchTitle.toLowerCase())\n      && (\n        selectOption === 'all'\n        || (selectOption === 'active' && todo.completed === false)\n        || (selectOption === 'completed' && todo.completed === true)\n      ),\n  );\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <input\n          className=\"TodoList__list-searchBar\"\n          type=\"text\"\n          value={searchTitle}\n          onChange={searchHandler}\n        />\n        <div className=\"TodoList__list-select-container\">\n          <label htmlFor=\"select_todo\">Choose a todo:</label>\n\n          <select className=\"TodoList__list-select\" onChange={selectHandler}>\n            <option\n              value={Options.all}\n              disabled\n              selected\n            >\n              --Please choose an option--\n            </option>\n            <option value={Options.all}>all</option>\n            <option value={Options.active}>active</option>\n            <option value={Options.completed}>completed</option>\n          </select>\n        </div>\n        <button\n          className=\"TodoList__randomize button\"\n          type=\"button\"\n          onClick={() => {\n            dispatch(todosActions.randomize());\n          }}\n        >\n          Randomize\n        </button>\n        <ul className=\"TodoList__list\">\n          {filtredTodos.length === 0\n            ? 'No todos'\n            : filtredTodos.map(todo => (\n              <li\n                className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    onClick={e => e.preventDefault()}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <div>\n                  <button\n                    className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(loadUser(todo.userId));\n                    }}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                  &nbsp;\n                  <button\n                    type=\"button\"\n                    className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                    TodoList__delete-button\n                  \"\n                    onClick={() => dispatch(deleteTodo(todo.id))}\n                  >\n                    X\n                  </button>\n                </div>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  clearUser: () => void;\n  currentUserData: User;\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  clearUser,\n  currentUserData,\n}) => {\n  if (currentUserData) {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {currentUserData.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{currentUserData.name}</h3>\n        <p className=\"CurrentUser__email\">{currentUserData.email}</p>\n        <p className=\"CurrentUser__phone\">{currentUserData.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <b>User not found</b>\n  );\n};\n","import React, { useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { actions as userActions } from './redux/user';\nimport { selectors, loadTodos } from './redux';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentUserData = useSelector(selectors.getUser);\n  const todos = useSelector(selectors.getTodos);\n\n  useEffect(() => {\n    dispatch(loadTodos());\n  }, []);\n\n  const clearUser = useCallback(() => {\n    dispatch(userActions.setUser(null));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {currentUserData ? (\n            <CurrentUser\n              clearUser={clearUser}\n              currentUserData={currentUserData}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}